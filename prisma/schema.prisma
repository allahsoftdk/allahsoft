// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int            @id @default(autoincrement())
  name                   String?        @unique @db.VarChar(255)
  email                  String?        @unique @db.VarChar(255)
  password               String?        @db.Text()
  token                  String?        @db.Text()
  created_at             DateTime       @default(now()) @db.DateTime()
  update_at              DateTime       @default(now()) @db.DateTime()
  posts                  Post[]
  followedBy             User[]         @relation("Userfollows")
  following              User[]         @relation("Userfollows")
  postComments           Post_comment[]
  likes                  Post[]         @relation("PostLike")
  chatMessages           Chat_message[]
  chatRoomsParticipating Chat_room[]    @relation("ChatRoomParticipants")
  role                   Role           @relation(fields: [roleId], references: [id])
  roleId                 Int
}

model Prayer_alarm {
  id          Int    @id @default(autoincrement())
  prayerAlarm String @db.VarChar(255)
}

model Setting {
  id           Int    @id @default(autoincrement())
  settingName  String @db.VarChar(255)
  settingValue String @db.VarChar(255)
}

model Post {
  id           Int            @id @default(autoincrement())
  description  String         @db.TinyText()
  resources    String         @db.VarChar(255)
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  postComments Post_comment[]
  likedBy      User[]         @relation("PostLike")
}

model Post_comment {
  id      Int    @id @default(autoincrement())
  comment String @db.TinyText()
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int    @db.Int
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @db.Int

  @@index([postId, userId])
}

model Chat_room {
  id                   Int            @id @default(autoincrement())
  name                 String         @db.VarChar(255)
  chatMessages         Chat_message[]
  chatRoomParticipants User[]         @relation("ChatRoomParticipants")
}

model Chat_message {
  messages   String    @db.VarChar(255)
  chatRoom   Chat_room @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int

  @@id([chatRoomId, userId])
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @unique @db.VarChar(255)
  users User[]
}
